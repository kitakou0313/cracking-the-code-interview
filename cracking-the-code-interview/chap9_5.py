"""
仮定
一番人気のクエリは、常にキャッシュにいる（人気のあるテーマなら検索数も増えるし）
マシン間の通信は早い
クエリの結果　URLのリスト（50文字程度）＋ページの概要（heda要素の中身など）


要件
キーによる高効率な検索
更新（クエリの結果の変化によるもの、容量の上限による更新）

単一マシン➝複数マシンへ変えて考えていく

単一マシン
キャッシュの更新->LRUがよさそう　何回も同じ検索が走りそうなので

連結リストを用いてクエリの結果を保持する。
head -> node -> node -> node -> tail
最新　　　　　　　　　　　　　　　　　古い
アクセス毎に対応するクエリ結果を格納するnodeを先頭にすることで最新の結果を保てる。
容量の上限での更新時も後ろのノードが自動的にアクセスもっともアクセスされていないものになるので、これを削除すればよい

対応するノードの検索にはハッシュマップを使う。
クエリにをキーとして、対応するノードを返す。

アルゴリズム
クエリの結果が来る➝　ハッシュにある➝先端に接続しなおし
　　　　　　　　　　➝　ハッシュになし➝先端に接続

複数マシンでは？
「クエリに対して、常に同じマシンが応答するとは限らない」

完全なコピーを持つ
（メモリが無駄、更新ごとに全マシンに通信が走る）
or独自のキャッシュをもつ
（次にまた来るかわからないため、キャッシュ効果が効きにくくなる）
or対応するキャッシュをもつサーバーにクエリを転送する
（アクセス集中時に一つのサーバーしか応答しないため、分散している意味がなくなりそう）


キャッシュの更新
URLコンテンツの変更
ページランキングの変動
➝URLとコンテンツ、もしくはランキングが対応したハッシュを作り、対応するクエリのキャッシュを更新するとか

クエリに対して新しいページが追加された場合
➝一定期間でキャッシュを削除する
"""
